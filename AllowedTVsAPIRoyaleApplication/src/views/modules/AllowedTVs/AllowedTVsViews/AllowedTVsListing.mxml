<?xml version="1.0" encoding="utf-8"?>
<j:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:j="library://ns.apache.org/royale/jewel"
		 xmlns:js="library://ns.apache.org/royale/basic" 
		 xmlns:html="library://ns.apache.org/royale/html"
		 itemsVerticalAlign="itemsCenter" itemsHorizontalAlign="itemsCenter" className="bodyPadding"
		 initComplete="onInitCompletes()">
	<fx:Metadata>
		[Event(name="eventNavigateTo", type="classes.events.ScreenEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import classes.events.ScreenEvent;
            import org.apache.royale.jewel.Snackbar;
			import org.apache.royale.events.MouseEvent;
            import classes.events.DeleteItemEvent;
            import org.apache.royale.events.Event;
			import views.modules.AllowedTVs.AllowedTVsViews.AllowedTVsAddEdit;
import views.modules.AllowedTVs.AllowedTVsVO.AllowedTVsVO;
import views.modules.AllowedTVs.AllowedTVsServices.AllowedTVsProxy;
			
			public static const NAME:String = "AllowedTVsListing";

			[Bindable]
            private var proxy:AllowedTVsProxy = AllowedTVsProxy.getInstance();
            private var isItemsRequested:Boolean;

            public function refresh():void
            {
                if (!isItemsRequested)
                {
                    onRefresh(null);
                    isItemsRequested = true;
                }
            }

            private function onInitCompletes():void
            {
                proxy.addEventListener(AllowedTVsProxy.EVENT_ITEM_UPDATED, onItemBeingUpdated);
                dgItems.addEventListener(DeleteItemEvent.DELETE_TABLE_ITEM, onItemDeletionRequest);
            }

			private function onAddNewRequest(event:MouseEvent):void
			{
			    this.proxy.selectedItem = null;
				dispatchEvent(new ScreenEvent(ScreenEvent.EVENT_NAVIGATE_TO, AllowedTVsAddEdit.NAME));
			}

			private function onRefresh(event:MouseEvent):void
            {
                proxy.requestItems();
            }
			
			private function onBackRequest(event:MouseEvent):void
			{
				dispatchEvent(new ScreenEvent(ScreenEvent.EVENT_NAVIGATE_TO, "Dashboard"));
			}
			
			private function onItemDoubleClicked(event:Event):void
            {
                proxy.selectedItem = this.dgItems.selectedItem as AllowedTVsVO;
                dispatchEvent(new ScreenEvent(ScreenEvent.EVENT_NAVIGATE_TO, AllowedTVsAddEdit.NAME));
                proxy.dispatchEvent(new Event(AllowedTVsProxy.EVENT_ITEM_SELECTED));
            }
            
            private function onItemDeletionRequest(event:DeleteItemEvent):void
            {
                var item:AllowedTVsVO = event.item as AllowedTVsVO;
                proxy.removeItem(item);
            }
            
            private function onItemBeingUpdated(event:Event):void
            {
                //Snackbar.show("Request submitted successfully.", 4000, null);
            }
			
		]]>
	</fx:Script>
	<j:beads>
		<js:ContainerDataBinding />
	</j:beads>
	
	<j:Grid gap="false">
		<j:GridCell desktopNumerator="1" desktopDenominator="2" tabletNumerator="1" 
					tabletDenominator="2" phoneNumerator="1" phoneDenominator="2">
			<html:H2 text="Allowed TVs"/>
		</j:GridCell>
		<j:GridCell desktopNumerator="1" desktopDenominator="2" tabletNumerator="1" tabletDenominator="2" 
					phoneNumerator="1" phoneDenominator="2">
			<j:HGroup width="100%" height="100%" itemsHorizontalAlign="itemsRight" itemsVerticalAlign="itemsCenter" gap="4">
				<j:IconButton text="Add New"
							  click="onAddNewRequest(event)">
					<j:icon>
						<js:MaterialIcon text="{MaterialIconType.ADD}" />
					</j:icon>
				</j:IconButton>
				<j:IconButton text="Refresh"
				                click="onRefresh(event)">
					<j:icon>
						<js:MaterialIcon text="{MaterialIconType.REFRESH}" />
					</j:icon>
				</j:IconButton>
				<j:IconButton text="Back"
								click="onBackRequest(event)">
					<j:icon>
						<js:MaterialIcon text="{MaterialIconType.ARROW_BACK}" />
					</j:icon>
				</j:IconButton>
			</j:HGroup>
		</j:GridCell>
	</j:Grid>
	
	<js:HRule percentWidth="100"/>
	<j:Spacer height="20"/>
	
	<j:Label percentWidth="100" text="* Double click to open any row in edit"
			 className="smallFont italic labelTextAlignRight"/>
	<j:DataGrid id="dgItems"
	    dataProvider="{this.proxy.items}"
	    className="dataGridOwner"
	    doubleClick="onItemDoubleClicked(event)">
		<j:columns>
			<j:DataGridColumn label="ID" dataField="ID"  columnWidth="200"/>
<j:DataGridColumn label="Display Name" dataField="tvName"  columnWidth="200"/>
<j:DataGridColumn label="Camera List" dataField="availableCameras" itemRenderer="views.renderers.MultivalueStringGridItemRenderer" columnWidth="200"/>

			<j:DataGridColumn label="Delete" itemRenderer="views.renderers.DeleteGridItemRenderer" 
							  columnWidth="100"/>
		</j:columns>
	</j:DataGrid>
</j:VGroup>