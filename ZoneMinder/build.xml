<project name="ZoneMinderBuildAndTest" basedir="." default="BuildAndRunOnSimulator" >
	
	<!--
	//==========================================================================
	//
	//  PARAMETERS - Override these as needed on the commandline with -D<property>=<value
	//  Example:  ant -DAPP_NAME=ZoneMinder -DAPP_ID=net.prominic.ZoneMinder
	//
	//==========================================================================
	-->
	
	<property name="APP_NAME" value="ZoneMinder" />
	<property name="APP_ID" value="net.prominic.ZoneMinder" />
	<!-- The Label for the simulator to use for running this application.  
	     The script will search for the first match in the "xcrun simctl list devices available" command output -->
	<property name="SIMULATOR" value="Apple TV 4K (at 1080p)" />
	<!-- Alternatively, you can specify a specific device ID (from "xcrun simctl list") with this parameter:  "-DtargetDeviceUDID=<id>" -->
	
	<!--
	//==========================================================================
	//
	//  PROPERTIES
	//
	//==========================================================================
	-->
	
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpath="ant-contrib-1.0b3.jar"/>
	
	<condition property="XCODEBUILD_EXEC" value="/usr/bin/xcodebuild">
		<and>
			<os family="mac" />
			<available file="/usr/bin/xcodebuild" />
		</and>		
	</condition>
	
	<condition property="XCRUN_EXEC" value="/usr/bin/xcrun">
		<and>
			<os family="mac" />
			<available file="/usr/bin/xcrun" />
		</and>		
	</condition>
	
	<!--
	//==========================================================================
	//
	//  TASKS
	//
	//==========================================================================
	 -->

	<target name="RetrieveInitialDetails" unless="targetDeviceUDID" >
		<exec executable="bash" failonerror="true" outputproperty="targetDeviceUDID">
			<arg value="-c"/>
			<arg value="${XCRUN_EXEC} simctl list devices available | grep '${SIMULATOR}' | head -n 1 | sed 's/.*(\([^)]*\)) ([^)]*) *$/\1/'"/>
		</exec>
		<echo>Target device UDID: ${targetDeviceUDID}</echo>
	</target>
	
	<target name="BuildAndRunOnSimulator" depends="RetrieveInitialDetails">
		<exec executable="bash" failonerror="true">
			<arg value="-c"/>
			<arg value="${XCODEBUILD_EXEC} clean build -scheme ${APP_NAME} -project ${APP_NAME}.xcodeproj -destination 'id=${targetDeviceUDID}'"/>
		</exec>
		<exec executable="bash" failonerror="true" outputproperty="buildDirectory">
			<arg value="-c"/>
			<arg value="${XCODEBUILD_EXEC} -project ${APP_NAME}.xcodeproj -showBuildSettings 2>&amp;1 | grep -m 1 'BUILD_DIR' | sed 's/^.*BUILD_DIR = \(.*\)$/\1/'"/>
		</exec>
		<echo>Build directory: ${buildDirectory}</echo>
		<echo>Starting target simulator..</echo>
		<exec executable="bash" failonerror="true">
			<arg value="-c"/>
			<arg value="open -a Simulator --args -CurrentDeviceUDID ${targetDeviceUDID}"/>
		</exec>
		<echo>Simulator started with UDID: ${targetDeviceUDID}</echo>

		<property name="continueTestBoot" value="true"/>
		<antcall target="testSimulatorBoot"/>

		<echo>Installing app on simulator..</echo>
		<exec executable="bash" failonerror="true">
			<arg value="-c"/>
			<arg value="${XCRUN_EXEC} simctl install ${targetDeviceUDID} '${buildDirectory}/Debug-appletvsimulator/${APP_NAME}.app'"/>
		</exec>
		<echo>Starting the app..</echo>
		<exec executable="bash" failonerror="true">
			<arg value="-c"/>
			<arg value="${XCRUN_EXEC} simctl launch ${targetDeviceUDID} ${APP_ID}"/>
		</exec>
	</target>
	
	<target name="testSimulatorBoot" if="${continueTestBoot}">
		<exec executable="bash" failonerror="true" outputproperty="targetDeviceBootTestOutput">
			<arg value="-c"/>
			<arg value="${XCRUN_EXEC} simctl list devices available | grep '${targetDeviceUDID}'"/>
		</exec>

		<echo>${targetDeviceBootTestOutput}</echo>
		<if>
		<matches pattern="(Booted)" string="${targetDeviceBootTestOutput}"/>
		<then>
			<echo>Its booted</echo>
			<property name="continueTestBoot" value="false"/>
		</then>
		<else>
		<echo>not booted - testing in a few seconds</echo>
			<!-- Since we can not re-call the owner target -->
			<antcall target="restartTestSimulatorBoot"/>
		</else>
		</if>
	</target>
	
	<target name="restartTestSimulatorBoot">
		<sleep seconds="20"/>
		<var name="targetDeviceBootTestOutput" unset="true"/>
		<antcall target="testSimulatorBoot"/>
	</target>
</project>
