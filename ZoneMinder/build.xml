<project name="ZoneMinderBuildAndTest" basedir="." default="BuildAndRunOnSimulator" >
	<description>
		This is a library shared ANT tasks to be used for building GBAuth.  This should be included and called from an ANT script in the WEB or DESKTOP projects.
	</description>
 	
	<tstamp>
		<format property="timestamp" pattern="yyyy-MM-dd_HH-mm-ss" />
	</tstamp>
	
	<!--
	//==========================================================================
	//
	//  PROPERTIES
	//
	//==========================================================================
	-->
	
	<!-- Compilers and Flex SDK configuration -->
	<xmlproperty file="ApplicationProperties.xml" keeproot="false" semanticattributes="true" prefix="APP_PROPERTIES"/>
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpath="ant-contrib-0.6.jar"/>
	<property name="keepDebugFiles" value="${APP_PROPERTIES.keepDebugFiles}" />
	

	<condition property="isWindows">
		<os family="windows" />
	</condition>

	<condition property="isUnix">
		<os family="unix" />
	</condition>

	<!-- Determining the run at local system or cloud -->
	<property name="localOrCloud" value="${svn.revision}"/>
	<if>
		<contains string="${localOrCloud}" substring="svn.revision"/>
		<then>
			<property name="GBAUTH_IS_DESKTOP" value="GBAUTH_IS_DESKTOP"/>
		</then>
		<else>
			<property name="GBAUTH_IS_DESKTOP" value="${GBAUTH_IS_DESKTOP}"/>
		</else>
	</if>

	<if>
		<!-- This expected value means its not running on Bamboo -->
		<equals arg1="${GBAUTH_IS_DESKTOP}" arg2="GBAUTH_IS_DESKTOP"/>
		<then>
			<echo>Reading properties from local ApplicationProperties</echo>
			<property name="IsDevelopmentBuild" value="${APP_PROPERTIES.isDevelopmentVersion}"/>
			<property name="BuildVersion" value="${APP_PROPERTIES.buildVersion}"/>
			<property name="Is.Signed.Build" value="${APP_PROPERTIES.isSignedBuild}"/>
			<property name="certSignedAIR" value="${APP_PROPERTIES.certSignedAIR}" />
			<property name="certSignedAIRPassword" value="${APP_PROPERTIES.certSignedAIRPass}" />
			<property name="certSignedWindowsBinary" value="${APP_PROPERTIES.certSignedWindowsBinary}" />
			<property name="certSignedWindowsBinaryPassword" value="${APP_PROPERTIES.certSignedWindowsBinaryPass}" />
			<property name="certSignedDevIDKeychainName" value="${APP_PROPERTIES.certSignedDevIDKeychainName}" />
			<property name="certSignedMacOSKeychainName" value="${APP_PROPERTIES.certSignedMacOSKeychainName}" />
			<property name="certSignedMacOSKeychainInstallerName" value="${APP_PROPERTIES.certSignedMacOSKeychainInstallerName}" />
			<property name="certSignedMacOSKeychainPass" value="${APP_PROPERTIES.certSignedMacOSKeychainPass}" />
			<property name="bundledFlexSDK" value="${APP_PROPERTIES.bundledFlexSDK}" />
			<property name="bundledFlexJSSDK" value="${APP_PROPERTIES.bundledFlexJSSDK}" />
			<condition property="XCODEBUILD_EXEC" value="${APP_PROPERTIES.haxeLibDirectory}">
				<isset property="APP_PROPERTIES.haxeLibDirectory"/>
			</condition>
			<!-- fall back to default Haxe install location, if available -->
			<condition property="XCODEBUILD_EXEC" value="c:/HaxeToolkit/haxe">
				<and>
					<os family="windows" />
					<available file="c:/HaxeToolkit/haxe/haxelib.exe" />
				</and>
			</condition>
			
			<property name="svn.revision" value="917"/>
			<property name="IsDebug" value="false" />
		</then>
		<else>
			<echo>Reading properties from Bamboo Variables</echo>
			<property name="IsDevelopmentBuild" value="${GBA_IS_DEVELOPMENT_VERSION}"/>
			<property name="BuildVersion" value="${GBA_VERSION}"/>
			<property name="Is.Signed.Build" value="${IS_SIGNED_BUILD}"/>
			<property name="certSignedAIR" value="${CERT_WIN_AIR}" />
			<property name="certSignedAIRPassword" value="${CERT_WIN_AIR_PASS}" />
			<property name="certSignedWindowsBinary" value="${CERT_WIN_INSTALLER}" />
			<property name="certSignedWindowsBinaryPassword" value="${CERT_WIN_INSTALLER_PASS}" />
			<property name="certSignedDevIDKeychainName" value="${CERT_DEV_ID_KEYCHAIN}" />
			<property name="certSignedMacOSKeychainName" value="${CERT_OSX_KEYCHAIN}" />
			<property name="certSignedMacOSKeychainInstallerName" value="${CERT_OSX_KEYCHAIN_INSTALLER}" />
			<property name="certSignedMacOSKeychainPass" value="${CERT_OSX_KEYCHAIN_PASS}" />
			<property name="bundledFlexSDK" value="${BUNDLED_FLEX_SDK}" />
			<property name="bundledFlexJSSDK" value="${BUNDLED_FLEXJS_SDK}" />
			<property name="XCODEBUILD_EXEC" value="${HAXE_LIB}"/>
			<property name="svn.revision" value="${svn.revision}" />
			<property name="IsDebug" value="false" />
		</else>
	</if>
	
	<echo>OS BIT : ${os.arch}</echo>
	<echo>Is.Signed.Build : ${Is.Signed.Build}</echo>
	<if>
		<os family="windows"/>
		<then>
			<if>
				<os arch="x86"/>
				<then>
					<propertycopy property="FLEX_HOME" from="APP_PROPERTIES.winSDKPath" silent="true" />
				</then>
				<else>
					<propertycopy property="FLEX_HOME" from="APP_PROPERTIES.winSDKPath64" silent="true" />
				</else>
			</if>
		</then>
		<else>
			<propertycopy property="FLEX_HOME" from="APP_PROPERTIES.unixSDKPath" silent="true" />
		</else>
	</if>

	<condition property="Is.FLEX_HOME.Not.Exists" else="false">
		<or>
			<and>
				<equals arg1="${FLEX_HOME}" arg2=""/>
			</and>
			<not>
				<available file="${FLEX_HOME}"/>
			</not>
		</or>
	</condition>
	
	<condition property="XCODEBUILD_EXEC" value="/usr/bin/xcodebuild">
		<and>
			<os family="mac" />
			<available file="/usr/bin/xcodebuild" />
		</and>		
	</condition>
	
	<condition property="XCRUN_EXEC" value="/usr/bin/xcrun">
		<and>
			<os family="mac" />
			<available file="/usr/bin/xcrun" />
		</and>		
	</condition>
	
	<condition property="Is.Bundled.SDK.Available" else="false">
		<not>
			<equals arg1="${bundledFlexSDK}" arg2=""/>
		</not>
	</condition>
	<echo>Is.Bundled.SDK.Available : ${Is.Bundled.SDK.Available}</echo>
	
	<!-- Read all environment properties -->
	<property environment="env"/>
	<!-- Check and set if Flex SDK already setup as environment variable -->
	<propertycopy property="FLEX_HOME" from="env.FLEX_HOME" silent="true" override="${Is.FLEX_HOME.Not.Exists}"/>
	<propertycopy property="SIGNTOOL_HOME" from="env.SIGNTOOL_HOME" silent="true"/>
	<propertycopy property="NSIS_HOME" from="env.NSIS_HOME" silent="true"/>
	<echo>SDK : ${FLEX_HOME}</echo>
	<echo>SIGNTOOL: ${SIGNTOOL_HOME}</echo>
	<echo>NSIS: ${NSIS_HOME}</echo>
	<echo>Haxe: ${XCODEBUILD_EXEC}</echo>
	
    <!-- Path to your Flex SDK with AIR 3.1 overlaid -->
	<taskdef resource="flexTasks.tasks" classpath="${FLEX_HOME}/ant/lib/flexTasks.jar"/>
	<echo>flexTasks.tasks : ${FLEX_HOME}/ant/lib/flexTasks.jar</echo>
    <property name="mxmlc_path" value="${FLEX_HOME}/lib/mxmlc.jar" />
    <property name="adt_path" value="${FLEX_HOME}/lib/adt.jar" />
	
	<!-- Library libs and directories -->
	<property name="debug_dir" value="../bin"/>
	<property name="desktopApplicationDescriptorOriginal" value="../project.xml" />
	<property name="desktopApplicationDescriptor" value="../ant_build_project.xml" />
	<property name="source_dir" value="../"/>
	
	
	
	
	<property name="LibraryLibs.dir" value="../libs"/>
	<property name="LibrarySharedCore.dir" value="../../ProminicNativeMultiCodebase/SharedCoreBase"/>
	<property name="LibrarySharedAIRCore.dir" value="../../ProminicNativeMultiCodebase/SharedAIRCoreBase"/>
 
    <!-- Application configuration -->
    <property name="swfFilename" value="${debug_dir}/GBAuthDevelopment.swf" />
	<property name="applicationSourceDirectory" value="../src"/>
	<property name="desktopMainSource" value="${applicationSourceDirectory}/GBAuthDevelopment.mxml" />
	
	<!-- Desktop configuration -->
	<if>
		<equals arg1="${APP_PROPERTIES.certSelfSigned}" arg2=""/>
		<then>
			<property name="certSelfSignedNameOnly" value="MoonshineSelfSignedCertificate" />
			<property name="certSelfSigned" value="MoonshineSelfSignedCertificate.p12" />
			<property name="certSelfSignedPassword" value="moonshine" />
		</then>
		<else>
			<property name="certSelfSignedNameOnly" value="${APP_PROPERTIES.certSelfSignedNameOnly}" />
			<property name="certSelfSigned" value="${APP_PROPERTIES.certSelfSigned}" />
			<property name="certSelfSignedPassword" value="${APP_PROPERTIES.certSelfSignedPass}" />
		</else>
	</if>
	
	<condition property="Is.Keychain.Certificate.Defined">
		<and>
			<not>
				<equals arg1="${certSignedMacOSKeychainInstallerName}" arg2=""/>
			</not>
			<not>
				<equals arg1="${certSignedMacOSKeychainInstallerName}" arg2="CERT_OSX_KEYCHAIN_INSTALLER"/>
			</not>
			<not>
				<equals arg1="${certSignedMacOSKeychainPass}" arg2=""/>
			</not>
			<not>
				<equals arg1="${certSignedMacOSKeychainPass}" arg2="CERT_OSX_KEYCHAIN_PASS"/>
			</not>
		</and>
	</condition>
	<echo>Is.Keychain.Certificate.Defined: ${Is.Keychain.Certificate.Defined}</echo>
	
	<tstamp>
		<format property="timestamp.time" pattern="MM/dd/yyyy hh:mm aa"/>
	</tstamp>
	
	<!--
	//==========================================================================
	//
	//  TASKS
	//
	//==========================================================================

	<target name="createBuildInfoFile" depends="modifyDescriptor">
		<echo file="${debug_dir}/assets/appProperties.txt" append="false">${svn.revision}</echo>
	</target>

	<!-\- Create a certificate if it doesn't exist already -->
	<target name="createCertificate" unless="certSelfSigned.exists">
		<echo>Self-signed .p12 certificate generation</echo>
		<java jar="${adt_path}" fork="true" failonerror="true">
			<arg line="-certificate" />
			<arg line="-cn '${certSelfSignedNameOnly}'" />
			<arg line="2048-RSA" />
	   		<arg line="${certSelfSigned}" />
	   		<arg line="${certSelfSignedPassword}"/>
		</java>
		<copy file="${certSelfSigned}" todir="${debug_dir}" overwrite="true"/>
	 </target>

	<target name="RetrieveInitialDetails">
		<exec executable="bash" failonerror="true" outputproperty="targetDeviceUDID">
			<arg value="-c"/>
			<arg value="${XCRUN_EXEC} simctl list devices available | grep 'Apple TV 4K (at 1080p)' | head -n 1 | sed 's/.*(\([^)]*\)) ([^)]*) *$/\1/'"/>
		</exec>
		<echo>Target device UDID: ${targetDeviceUDID}</echo>
	</target>
	
	<target name="BuildAndRunOnSimulator" depends="RetrieveInitialDetails">
		<exec executable="bash" failonerror="true">
			<arg value="-c"/>
			<arg value="${XCODEBUILD_EXEC} clean build -scheme ${APP_NAME} -project ${APP_NAME}.xcodeproj -destination 'id=${targetDeviceUDID}'"/>
		</exec>
		<exec executable="bash" failonerror="true" outputproperty="buildDirectory">
			<arg value="-c"/>
			<arg value="${XCODEBUILD_EXEC} -project ${APP_NAME}.xcodeproj -showBuildSettings | grep -m 1 'BUILD_DIR' | sed 's/^.*BUILD_DIR *= *\(.*\)$/\1/'"/>
		</exec>
		<echo>Build directory: ${buildDirectory}</echo>
		<echo>Starting target simulator..</echo>
		<exec executable="bash" failonerror="true">
			<arg value="-c"/>
			<arg value="open -a Simulator --args -CurrentDeviceUDID ${targetDeviceUDID}"/>
		</exec>
		<echo>Simulator started with UDID: ${targetDeviceUDID}</echo>
		<sleep seconds="10"/>
		<echo>Installing app on simulator..</echo>
		<exec executable="bash" failonerror="true">
			<arg value="-c"/>
			<arg value="${XCRUN_EXEC} simctl install ${targetDeviceUDID} '${buildDirectory}/Debug-appletvsimulator/${APP_NAME}.app'"/>
		</exec>
		<echo>Starting the app..</echo>
		<exec executable="bash" failonerror="true">
			<arg value="-c"/>
			<arg value="${XCRUN_EXEC} simctl launch ${targetDeviceUDID} ${APP_ID}"/>
		</exec>
	</target>

	
	<!--
	//==========================================================================
	//
	//  WINDOWS
	//
	//==========================================================================
	-->
	
	<target name="CompileWindows">
		<echo>Compiling for Mac platform</echo>
		<exec executable="${XCODEBUILD_EXEC}/haxelib"
			dir="${source_dir}"
			failonerror="true">
			<arg value="run"/>
			<arg value="lime"/>
			<arg value="build"/>
			<arg value="ant_build_project.xml"/>
			<arg value="windows"/>
			<arg value="-release"/>
			<arg value="-clean"/>
		</exec>
		<mkdir dir="${windowsBundleFilename}"/>
		<move todir="${windowsBundleFilename}">
		  <fileset dir="${deploy_dir}">
			<include name="*.exe"/>
			<include name="*.ndll"/>
			<include name="*.ico"/>
		  </fileset>
		</move>
	</target>
	
	<!-- Windows signed packaging initiator -->
	<target name="signedSigningBuild" if="${Is.Signed.Build}">
		<antcall target="generateSignedEXE"></antcall>
	</target>

	<!-- Windows packaging/signing Task -->
	<target name="generateSignedEXE">
		<echo># Signed Process Running - Signing Executable</echo>
		<exec executable="${SIGNTOOL_HOME}/signtool.exe" failonerror="true">
			<arg value="sign"/>
			<arg value="/f"/>
			<arg value="${certSignedWindowsBinary}"/>
			<arg value="/p"/>
			<arg value="${certSignedWindowsBinaryPassword}"/>
			<arg value="/tr"/>
			<arg value="http://timestamp.digicert.com"/>
			<arg value="${windowsBundleFilename}/${installerName}.exe"/>
		</exec>
		<echo># Signed Process Running - Praparing Installer</echo>
		<exec executable="${NSIS_HOME}/makensis.exe" failonerror="true">
			<arg value="/DVERSION=${BuildVersion}"/>
			<arg value="/DDEPLOYDIRECTORY=${deploy_dir}"/>
			<arg value="/DINSTALLERNAME=${installerName}"/>
			<arg value="/DEXECUTABLENAME=${executableName}"/>
			<arg value="/DAPPID=${applicationID}"/>
			<arg value="/DTIMESTAMP=${timestamp.time}"/>
			<arg value="nsis-build.nsi"/>
		</exec>
		<!-- NOTE: If we do the installer name in this format ${installerName}-${versionNumber}
			then we don't require this following sleep. But if change the latter format with some
			static value, i.e. ${installerName}-Installer, the signing process failed with
			process hold-up error. A sleep of seconds fix this problem for now. -->
		<sleep seconds="2"/>
		<echo># Signed Process Running - Signing Installer: ${certSignedWindowsBinary} ${SIGNTOOL_HOME}</echo>
		<exec executable="${SIGNTOOL_HOME}/signtool.exe" failonerror="true">
			<arg value="sign"/>
			<arg value="/f"/>
			<arg value="${certSignedWindowsBinary}"/>
			<arg value="/p"/>
			<arg value="${certSignedWindowsBinaryPassword}"/>
			<arg value="/tr"/>
			<arg value="http://timestamp.digicert.com"/>
			<arg value="${deploy_dir}/${installerName}-Installer.exe"/>
		</exec>
	 </target>
	
	<!-- Windows self-signed packaging initiator -->
	<target name="normalSigningBuild" unless="${Is.Signed.Build}">
		<antcall target="generateSelfSignedEXE"></antcall>
	</target>

	 <!-- Windows packaging/signing Task -->
	<target name="generateSelfSignedEXE">
		<echo>Self-signed Process Running</echo>
		<exec executable="${SIGNTOOL_HOME}/signtool.exe" failonerror="true">
			<arg value="sign"/>
			<arg value="/f"/>
			<arg value="${debug_dir}/${certSelfSigned}"/>
			<arg value="/p"/>
			<arg value="${certSelfSignedPassword}"/>
			<arg value="/tr"/>
			<arg value="http://timestamp.digicert.com"/>
			<arg value="${windowsBundleFilename}/${installerName}.exe"/>
		</exec>
		<echo># Signed Process Running - Praparing Installer</echo>
		<exec executable="${NSIS_HOME}/makensis.exe" failonerror="true">
			<arg value="/DVERSION=${BuildVersion}"/>
			<arg value="/DDEPLOYDIRECTORY=${deploy_dir}"/>
			<arg value="/DINSTALLERNAME=${installerName}"/>
			<arg value="/DEXECUTABLENAME=${executableName}"/>
			<arg value="/DAPPID=${applicationID}"/>
			<arg value="/DTIMESTAMP=${timestamp.time}"/>
			<arg value="nsis-build.nsi"/>
		</exec>
	 </target>
	
	<!--
	//==========================================================================
	//
	//  MACOS
	//
	//==========================================================================
	-->
	
	<target name="CompileMac" depends="RetrieveInitialDetails">
		<echo>Compiling for Mac platform</echo>
		<exec executable="${XCODEBUILD_EXEC}/haxelib"
			dir="${source_dir}"
			failonerror="true">
			<arg value="run"/>
			<arg value="lime"/>
			<arg value="build"/>
			<arg value="ant_build_project.xml"/>
			<arg value="macos"/>
			<arg value="-release"/>
			<arg value="-clean"/>
		</exec>
	</target>
	
	<!-- Compile DMG -->
	<target name="compile dmg project">
		<java jar="${adt_path}" fork="true" failonerror="true">
			<arg line="-package" />
			<arg line="-storetype pkcs12" />
			<arg line="-keystore '${debug_dir}/${certSelfSigned}' " />
			<arg line="-storepass '${certSelfSignedPassword}'" />
			<arg line=" -tsa 'http://timestamp.digicert.com'" />
			<arg line="-target native"/>
			<arg line="${output_dir}/${installerName}.dmg" />
			<arg line="${desktopApplicationDescriptor}" />
			<arg line="${swfFilename}" />
			<arg line="-extdir"/>
			<arg line="../extensions"/>
			<arg line="resources/images/icons" />
			<arg line="resources/images/bundles" />
			<arg line="dist" />
			<!-- Add folders to be bundled in the AIR file here -->
		</java>
	</target>
	
	<!-- Compile .app to next use in .pkg building -->
	<!--target name="compile app project" depends="compile dmg project"-->
	<target name="compile app project">
		<java jar="${adt_path}" fork="true" failonerror="true">
			<arg line="-package" />
			<arg line="-storetype pkcs12" />
			<arg line="-keystore '${debug_dir}/${certSelfSigned}'" />
			<arg line="-storepass '${certSelfSignedPassword}'" />
			<arg line="-tsa 'http://timestamp.digicert.com'" />
			<arg line="-target bundle"/>
			<arg line="'${desktopBinaryFilename}'" />
			<arg line="'${desktopApplicationDescriptor}'" />
			<arg line="'${swfFilename}'" />
			<arg line="-extdir"/>
			<arg line="../extensions"/>
			<arg line="resources/images/icons" />
			<arg line="resources/images/bundles" />
			<arg line="dist" />
			<!-- Add folders to be bundled in the AIR file here -->
		</java>
	</target>
	
	<!-- Compile .pkg to distribute through app store -->
	<target name="generateSignedPKG" if="${isOSX}">
		<copy tofile="${desktopBinaryFilename}/Contents/Resources/Icon.icns" file="${debug_dir}/assets/Icon.icns" overwrite="true"/>
		<replace file="${desktopBinaryFilename}/Contents/Info.plist">
			<replacetoken><![CDATA[<string>Icon.icns</string>]]></replacetoken>
			<replacevalue><![CDATA[<string>Icon.icns</string>
			<key>CFBundleName</key>
			<string>GBAuth</string>
			<key>LSApplicationCategoryType</key>
			<string>public.app-category.business</string>
			<key>CFBundleVersion</key>
			<string>1.0</string>
			<key>PayloadContent</key>
			    <array>
			        <dict>
			           <key>PayloadType</key>
			           <string>macapp-identifier</string>
			           <key>PayloadVersion</key>
			           <integer>1</integer>
			           <key>PayloadIdentifier</key>
			           <string>macapp-identifier</string>
			           <key>PayloadEnabled</key>
			           <true/>
			           <key>PayloadUUID</key>
			           <string>4A03E5F7-514B-44E2-8F0C-E2C8E0DFC921</string>
			           <key>PayloadDisplayName</key>
			           <string>Disable App Nap for GBAuth</string>
			           <key>NSAppSleepDisabled</key>
			           <true/>
			        </dict>
		        </array>
		    <key>PayloadDescription</key>
		    <string>Disable App Nap for GBAuth</string>
		    <key>PayloadDisplayName</key>
		    <string>Disable App Nap for GBAuth</string>
		    <key>PayloadIdentifier</key>
		    <string>macapp-identifier</string>
		    <key>PayloadOrganization</key>
		    <string>Prominic.NET, Inc.</string>
		    <key>PayloadRemovalDisallowed</key>
		    <true/>
		    <key>PayloadScope</key>
		    <string>System</string>
		    <key>PayloadType</key>
		    <string>Configuration</string>
		    <key>PayloadUUID</key>
		    <string>930B8202-8B27-4E87-BA10-187CA81696E5</string>
		    <key>PayloadVersion</key>
		    <integer>1</integer>]]></replacevalue>
		</replace>
		<if>
			<equals arg1="${IsDevelopmentBuild}" arg2="true"/>
			<then>
				<replaceregexp file="${desktopBinaryFilename}/Contents/Info.plist" match="macapp-identifier" replace="net.prominic.GBADevelopment" flags="g"/>
			</then>
			<else>
				<replaceregexp file="${desktopBinaryFilename}/Contents/Info.plist" match="macapp-identifier" replace="net.prominic.GBA" flags="g"/>
			</else>			
		</if>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='security unlock-keychain -p "${certSignedMacOSKeychainPass}"'/>
		</exec>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value="chmod -R 777 ${desktopBinaryFilename}"/>
		</exec>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='codesign -f -v -s "${certSignedDevIDKeychainName}" --deep ${desktopBinaryFilename}'/>
		</exec>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='codesign -f --options runtime --timestamp -v -s "${certSignedDevIDKeychainName}" --entitlements ${debug_dir}/entitlement.plist ${desktopBinaryFilename}'/>
		</exec>
		<echo>Signing checks on Sandbox APP: spctl -vvv --assess --type exec ${desktopBinaryFilename}</echo>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='spctl -vvv --assess --type exec ${desktopBinaryFilename}'/>
		</exec>
		<echo>Hardened runtime checks on Sandbox APP: codesign --display --verbose ${desktopBinaryFilename}</echo>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='codesign --display --verbose ${desktopBinaryFilename}'/>
		</exec>
		<echo>Timestamp check on Sandbox APP: codesign -dvv ${desktopBinaryFilename}</echo>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='codesign -dvv ${desktopBinaryFilename}'/>
		</exec>
		<exec executable="bash" failonerror="true">
			<arg value="-c"/>
			<arg value='productbuild --component ${desktopBinaryFilename} /Applications ${deploy_dir}/${applicationName}.pkg --sign "Developer ID Installer: Prominic.NET, Inc."'/>
		</exec>
		<echo>Installer check on Sandbox PKG: pkgutil --check-signature ${deploy_dir}/${applicationName}_Signed_NonSandbox.pkg</echo>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='pkgutil --check-signature ${deploy_dir}/${applicationName}.pkg'/>
		</exec>
		

		<!-- @devsena: Avail non-sandbox entitlement to be use in upcoming process -->
		<copy file="entitlement-non-sandbox.plist" tofile="${debug_dir}/entitlement.plist" overwrite="true"/>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='codesign -f --options runtime --timestamp -v -s "${certSignedDevIDKeychainName}" --entitlements ${debug_dir}/entitlement.plist ${desktopBinaryFilename}'/>
		</exec>
		<echo>Signing checks on Non-Sandbox APP: spctl -vvv --assess --type exec ${desktopBinaryFilename}</echo>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='spctl -vvv --assess --type exec ${desktopBinaryFilename}'/>
		</exec>
		<echo>Hardened runtime checks: codesign --display --verbose ${desktopBinaryFilename}</echo>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='codesign --display --verbose ${desktopBinaryFilename}'/>
		</exec>
		<echo>Timestamp check: codesign -dvv ${desktopBinaryFilename}</echo>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='codesign -dvv ${desktopBinaryFilename}'/>
		</exec>
		<exec executable="bash" failonerror="true">
			<arg value="-c"/>
			<arg value='productbuild --component ${desktopBinaryFilename} /Applications ${deploy_dir}/${applicationName}_DONOTUSE.pkg --sign "Developer ID Installer: Prominic.NET, Inc."'/>
		</exec>
		<!-- @devsena; Following part not suppose to go to source distribution. Referring the certificate as "${certSignedDevIDKeychainName}" always fails by unknown reason but if static name referencing  !-->
		<exec executable="bash" failonerror="true">
			<arg value="-c"/>
			<arg value='productsign --sign "Developer ID Installer: Prominic.NET, Inc." ${deploy_dir}/${applicationName}_DONOTUSE.pkg ${deploy_dir}/${applicationName}_Signed_NonSandbox.pkg'/>
		</exec>
		<echo>Installer check on Non-Sandbox PKG: pkgutil --check-signature ${deploy_dir}/${applicationName}_Signed_NonSandbox.pkg</echo>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='pkgutil --check-signature ${deploy_dir}/${applicationName}_Signed_NonSandbox.pkg'/>
		</exec>
		<exec executable="bash" failonerror="true">
			<arg value="-c"/>
			<arg value='rm ${deploy_dir}/${applicationName}_DONOTUSE.pkg'/>
		</exec>
	</target>

	
	<!-- Determine the SVN revision of the current project
            The revision is set to the "svn.revision" property
            If this property is already set, the task will not run.
            This requires the "svnversion" command. 
    -->
    <target name="svn-revision" unless="svn.revision">
        <echo message="Original revision number:  ${svn.revision}" />
        <!-- live version -->
        <exec executable="svnversion">
            <redirector outputproperty="svn.revision">
                <outputfilterchain>
                    <tokenfilter>
                        <stringtokenizer />
                        <replaceregex pattern="(.*)\:" replace="" />
                        <trim />
                    </tokenfilter>
                </outputfilterchain>
            </redirector>
        </exec>
        <!-- for debugging on a system where svn.revision does not work
        <property name="svn.revision" value="3329" /> -->
        
        <echo>SVN Revision: ${svn.revision}</echo>
        
        <!-- ensure that the revision is in the correct format -->
        <condition property="svn-valid">
			<matches pattern="^[0-9]*(M)?$" string="${svn.revision}"/>
        </condition>
        <fail message="Invalid format for SVN revision '${svn.revision}'."
              unless="svn-valid" />
    </target>
	
</project>